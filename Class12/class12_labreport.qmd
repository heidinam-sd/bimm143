---
title: "Class 12: Transcriptomics and the analysis of RNA-Seq data"
author: "Heidi Nam"
format: pdf
editor: visual
---

## Bioconductor and DESeq2 setup

code used to set up packages needed for this lab:

```{r}
# install.packages("BiocManager")
# BiocManager::install()
# BiocManager::install("DESeq2")
```

## Import `countData` and `colData`

importing data used for this lab:

```{r}
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <-  read.csv("airway_metadata.csv")
control_cell_lines <- table(metadata$dex)['control']
```

Q1 answer: There are `r nrow(counts)` genes in the dataset.

Q2 answer: We have `r control_cell_lines` 'control' cell lines in this dataset.

## Toy differential gene expression

let's look at differential gene expression analysis:

```{r}
control <- metadata[metadata[,"dex"]=="control",]
control.counts <- counts[ ,control$id]
control.mean <- rowSums( control.counts )/4 
head(control.mean)
```

**Q3.** How would you make the above code in either approach more robust?

-   when calculating the mean, instead of putting 4 (which shows the number of control lines) we could use `nrow(control)` which would make the `control.mean` a lot more robust.

-   or, just using `rowMeans(control.counts)`

Q4: Follow the same procedure for the `treated` samples (i.e.Â calculate the mean per gene across drug treated samples and assign to a labeled vector called `treated.mean`)

```{r}
treated <- metadata[metadata[,"dex"]=="treated",]
treated.counts <- counts[ ,treated$id]
treated.mean <- rowSums( treated.counts )/4 
head(treated.mean)
```

placing `meancount` data into a dataframe:

```{r}
meancounts <- data.frame(control.mean, treated.mean)
```

**Q5 (a).** Create a scatter plot showing the mean of the treated samples against the mean of the control samples.

```{r}
plot(meancounts[,1],meancounts[,2], xlab="Control", ylab="Treated")
```

**Q5 (b).**You could also use the **ggplot2** package to make this figure producing the plot below. What **geom\_?()** function would you use for this plot?

-   geom_point() would be used for this plot.

```{r}
library(ggplot2)
ggplot(meancounts) + 
  aes(x=meancounts[,1],y=meancounts[,2]) + 
  labs(x = "control", y ="treated") +
  geom_point()
```

**Q6.** Try plotting both axes on a log scale. What is the argument to **plot()** that allows you to do this?

-   `log = "xy"`

```{r}
plot(meancounts[,1], meancounts[,2], log="xy", xlab="Control", ylab="Treated")
```

looking at log2 of the fold change between and treated and control:

```{r}
meancounts$log2fc <- log2(meancounts[,"treated.mean"]/meancounts[,"control.mean"])
head(meancounts)
```

filtering weird results by removing zero values:

```{r}
zero.vals <- which(meancounts[,1:2]==0, arr.ind=TRUE)
to.rm <- unique(zero.vals[,1])
mycounts <- meancounts[-to.rm,]
head(mycounts)
```

**Q7.** What is the purpose of the `arr.ind` argument in the **which()** function call above? Why would we then take the first column of the output and need to call the **unique()** function?

-   The `arr.ind` calls anything that shows anything where they have zero counts for both control mean and treated mean; the first column was taken in order to ignore genes that have zero counts in any sample; the `unique()` function ensured we don't count genes twice if both of their entries are zero.

filtering for over and under-expressed genes:

```{r}
up.ind <- mycounts$log2fc > 2
down.ind <- mycounts$log2fc < (-2)
table(up.ind)
table(down.ind)
```

**Q8.** Using the `up.ind` vector above can you determine how many up regulated genes we have at the greater than 2 fc level?

-   there are 250 genes that are up regulated.

Q**9.** Using the `down.ind` vector above can you determine how many down regulated genes we have at the greater than 2 fc level?

-   there are 367 genes that are down regulated.

**Q10.** Do you trust these results? Why or why not?

-   These results are not reliable as we have not brought in statistical analysis to it; we do not know if the results are statistically significant in order to trust these results.

## DESeq2 Analysis

Loading the library:

```{r}
library(DESeq2)
```

```{r}
# citation("DESeq2")
```

Let's generate the specific object that `DESeq2` needs:

```{r}
dds <- DESeqDataSetFromMatrix(countData=counts, 
                              colData=metadata, 
                              design=~dex)
dds
```

```{r}
dds <- DESeq(dds)
```

```{r}
res <- results(dds)
```

```{r}
summary(res)
```

Changing p-value to 0.05:

```{r}
res05 <- results(dds, alpha=0.05)
summary(res05)
```

## Data visualization

Volcano plots:

```{r}
plot( res$log2FoldChange,  -log(res$padj), 
      xlab="Log2(FoldChange)",
      ylab="-Log(P-value)")
```
