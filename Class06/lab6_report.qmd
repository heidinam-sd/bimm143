---
title: "Class 6: R functions"
author: "Heidi Nam"
format: gfm
editor: visual
---

In this class we will develop our own R function to calculate average grades in a fictional class.

We will start with a simplified version of the problem, just calculating the average grade of one student.

## Simplified version

```{r}
# example input vectors to start with
student1<-c(100,100,100,100,100,100,100,90) 
student2<-c(100,NA,90,90,90,90,97,80) 
student3<-c(90,NA,NA,NA,NA,NA,NA,NA)
```

We are going to start by calculating the average score of the homeworks.

```{r}
mean(student1)
```

To get the minimum score we can use `which.min`.

```{r}
which.min(student1)
```

I can do the average of the first 7 homework scores.

```{r}
mean(student1[1:7])
```

Another way to select the first 7 homework scores:

```{r}
student1[1:7]
student1[-8]
```

Another way to drop the lowest score:

```{r}
student1_drop_lowest <- student1[-which.min(student1)]
student1_drop_lowest
```

I can get the mean of the homework sores after dropping the lowest score by doing:

```{r}
mean(student1_drop_lowest)
```

We have our first working snippet of code!

Let's try to generalize it to student 2.

```{r}
student2_drop_lowest <- student2[-which.min(student2)]
student2_drop_lowest
```

There is a way to calculate the mean dropping missing values (for NA).

```{r}
mean(student2, na.rm=TRUE)
```

This looks good for student2. However, for student3...

```{r}
mean(student3, na.rm=TRUE)
```

We want to know the position of the NAs. So, for student2 we can use the following.

```{r}
is.na(student2)
which(is.na(student2))
student2_drop_lowest <- student2[-which(is.na(student2))]
mean(student2_drop_lowest)
```

For student 3:

```{r}
is.na(student3)
which(is.na(student3))
```

For considering missing values, we can mask the NA values with 0:

```{r}
student2[is.na(student2)] <- 0
mean(student2)
```

If I use the same for student 3:

```{r}
student3[is.na(student3)] <- 0
student3
mean(student3)
```

This is going to be our final working snippet of code for all students (with and without NA values)

```{r}
student3[is.na(student3)] <- 0
student3_drop_lowest <- student3[-which.min(student3)]
mean(student3_drop_lowest)
```

Let's build a function now:

```{r}
x <- c(100, 75, 50, NA)
x[is.na(x)] <- 0
x_drop_lowest <- x[-which.min(x)]
mean(x_drop_lowest)
```

We can write it as a function:

```{r}
#' Calculate the average score for a vector of 
#' homework scores with the lowest score dropped 
#' and considering NA values as zeros.
#'
#' @param x A numeric vector of scores 
#'
#' @return The average value of homework scores 
#' @export 
#'
#' @examples 
#' student <- c(100,50,NA)
#' grade(student)
#' 
grade <- function(x) {
  #Masking NA values with zero
  x[is.na(x)] <- 0
  #assigning a new vector to hold x where the minimum value is dropped
  x_drop_lowest <- x[-which.min(x)]
  #finding the mean of the new vector
  mean(x_drop_lowest)
}
```

Let's apply the function:

```{r}
grade(student1)
grade(student2)
grade(student3)
```

## Applying to gradebook

Let's apply our function to a gradebook from this URL: "https://tinyurl.com/gradeinput"

```{r}
url <- "https://tinyurl.com/gradeinput"
gradebook <- read.csv(url, row.names= 1)
gradebook
```

Let's apply my function `grade` to the `gradebook` using `apply` and running it by **rows**.

```{r}
mean_gradebook <- apply(gradebook, 1, grade)
mean_gradebook
```

**Q2: Using the grade() function, who is the overall scoring student in the gradebook?**

```{r}
max(mean_gradebook)
```

The maximum score is 94.5

```{r}
which.max(mean_gradebook)
```

The maximum score was achieved by student 18.

**Q3: From your analysis of the gradebook, which homework was toughest on students (i.e. obtained the lowest scores overall?)**

First we are going to mask the NA values with 0.

```{r}
gradebook[is.na(gradebook)] <- 0
```

Now, we apply the `mean` function to the `gradebook`.

```{r}
which.min(apply(gradebook,2,mean))
```

The toughest homework will be homework 2 considering the mean and considering the missing homework as 0.

As one could argue that having zeros for missing homework is an inadequate representation of the homework difficulty, we could remove the missing values.

```{r}
url <- "https://tinyurl.com/gradeinput"
gradebook <- read.csv(url, row.names= 1)

apply(gradebook,2,mean,na.rm=TRUE)
which.min(apply(gradebook,2,mean,na.rm=TRUE))
```

Instead of assigning zeros to missing values, if we directly don't consider missing values, the toughest homework will be hw3 (according to the mean).

If we use the median in stead of the mean as a measure of overall score:

```{r}
apply(gradebook,2,median,na.rm=TRUE)
```

When using the median function, the toughest homework will be homework 2.

If we use some plots:

```{r}
boxplot(gradebook)
```

Through this, we can most logically conclude that homework 2 was the most toughest.

**Q4.From your analysis of the `gradebook`, which homework was most predictive of overall score (i.e. highest correlation with average grade score)?**

```{r}
overall_grades = apply(gradebook, 1, grade)
cor(overall_grades, gradebook$hw1)
```

```{r}
gradebook[is.na(gradebook)] <- 0
apply(gradebook, 2, cor, overall_grades)
which.max(apply(gradebook, 2, cor, overall_grades))
```

We can see that homework 5 was most predictive of the overall score.
